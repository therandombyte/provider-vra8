// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkProfileInitParameters struct {

	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	IsolatedExternalFabricNetworkID *string `json:"isolatedExternalFabricNetworkId,omitempty" tf:"isolated_external_fabric_network_id,omitempty"`

	IsolatedNetworkCidrPrefix *float64 `json:"isolatedNetworkCidrPrefix,omitempty" tf:"isolated_network_cidr_prefix,omitempty"`

	IsolatedNetworkDomainCidr *string `json:"isolatedNetworkDomainCidr,omitempty" tf:"isolated_network_domain_cidr,omitempty"`

	IsolatedNetworkDomainID *string `json:"isolatedNetworkDomainId,omitempty" tf:"isolated_network_domain_id,omitempty"`

	IsolationType *string `json:"isolationType,omitempty" tf:"isolation_type,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	Tags []NetworkProfileTagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkProfileLinksInitParameters struct {
}

type NetworkProfileLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +listType=set
	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type NetworkProfileLinksParameters struct {
}

type NetworkProfileObservation struct {

	// The ID of the cloud account this entity belongs to.
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsolatedExternalFabricNetworkID *string `json:"isolatedExternalFabricNetworkId,omitempty" tf:"isolated_external_fabric_network_id,omitempty"`

	IsolatedNetworkCidrPrefix *float64 `json:"isolatedNetworkCidrPrefix,omitempty" tf:"isolated_network_cidr_prefix,omitempty"`

	IsolatedNetworkDomainCidr *string `json:"isolatedNetworkDomainCidr,omitempty" tf:"isolated_network_domain_cidr,omitempty"`

	IsolatedNetworkDomainID *string `json:"isolatedNetworkDomainId,omitempty" tf:"isolated_network_domain_id,omitempty"`

	IsolationType *string `json:"isolationType,omitempty" tf:"isolation_type,omitempty"`

	Links []NetworkProfileLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	Tags []NetworkProfileTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NetworkProfileParameters struct {

	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	FabricNetworkIds []*string `json:"fabricNetworkIds,omitempty" tf:"fabric_network_ids,omitempty"`

	// +kubebuilder:validation:Optional
	IsolatedExternalFabricNetworkID *string `json:"isolatedExternalFabricNetworkId,omitempty" tf:"isolated_external_fabric_network_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsolatedNetworkCidrPrefix *float64 `json:"isolatedNetworkCidrPrefix,omitempty" tf:"isolated_network_cidr_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	IsolatedNetworkDomainCidr *string `json:"isolatedNetworkDomainCidr,omitempty" tf:"isolated_network_domain_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	IsolatedNetworkDomainID *string `json:"isolatedNetworkDomainId,omitempty" tf:"isolated_network_domain_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsolationType *string `json:"isolationType,omitempty" tf:"isolation_type,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []NetworkProfileTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkProfileTagsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetworkProfileTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NetworkProfileTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NetworkProfileSpec defines the desired state of NetworkProfile
type NetworkProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkProfileInitParameters `json:"initProvider,omitempty"`
}

// NetworkProfileStatus defines the observed state of NetworkProfile.
type NetworkProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkProfile is the Schema for the NetworkProfiles API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra8}
type NetworkProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionId) || (has(self.initProvider) && has(self.initProvider.regionId))",message="spec.forProvider.regionId is a required parameter"
	Spec   NetworkProfileSpec   `json:"spec"`
	Status NetworkProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkProfileList contains a list of NetworkProfiles
type NetworkProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkProfile `json:"items"`
}

// Repository type metadata.
var (
	NetworkProfile_Kind             = "NetworkProfile"
	NetworkProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkProfile_Kind}.String()
	NetworkProfile_KindAPIVersion   = NetworkProfile_Kind + "." + CRDGroupVersion.String()
	NetworkProfile_GroupVersionKind = CRDGroupVersion.WithKind(NetworkProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkProfile{}, &NetworkProfileList{})
}
