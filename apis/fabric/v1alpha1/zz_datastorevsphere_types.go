// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatastoreVsphereInitParameters struct {
	Tags []DatastoreVsphereTagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DatastoreVsphereLinksInitParameters struct {
}

type DatastoreVsphereLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +listType=set
	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type DatastoreVsphereLinksParameters struct {
}

type DatastoreVsphereObservation struct {

	// Set of ids of the cloud accounts this entity belongs to.
	// +listType=set
	CloudAccountIds []*string `json:"cloudAccountIds,omitempty" tf:"cloud_account_ids,omitempty"`

	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// A human-friendly description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// External entity Id on the provider side.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Id of datacenter in which the datastore is present.
	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	// Indicates free size available in datastore.
	FreeSizeGb *string `json:"freeSizeGb,omitempty" tf:"free_size_gb,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []DatastoreVsphereLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	// A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the organization this entity belongs to.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Email of the user that owns the entity.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	Tags []DatastoreVsphereTagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// Type of datastore.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DatastoreVsphereParameters struct {

	// +kubebuilder:validation:Optional
	Tags []DatastoreVsphereTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DatastoreVsphereTagsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatastoreVsphereTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatastoreVsphereTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// DatastoreVsphereSpec defines the desired state of DatastoreVsphere
type DatastoreVsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatastoreVsphereParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DatastoreVsphereInitParameters `json:"initProvider,omitempty"`
}

// DatastoreVsphereStatus defines the observed state of DatastoreVsphere.
type DatastoreVsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatastoreVsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DatastoreVsphere is the Schema for the DatastoreVspheres API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra8}
type DatastoreVsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatastoreVsphereSpec   `json:"spec"`
	Status            DatastoreVsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatastoreVsphereList contains a list of DatastoreVspheres
type DatastoreVsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatastoreVsphere `json:"items"`
}

// Repository type metadata.
var (
	DatastoreVsphere_Kind             = "DatastoreVsphere"
	DatastoreVsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatastoreVsphere_Kind}.String()
	DatastoreVsphere_KindAPIVersion   = DatastoreVsphere_Kind + "." + CRDGroupVersion.String()
	DatastoreVsphere_GroupVersionKind = CRDGroupVersion.WithKind(DatastoreVsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&DatastoreVsphere{}, &DatastoreVsphereList{})
}
