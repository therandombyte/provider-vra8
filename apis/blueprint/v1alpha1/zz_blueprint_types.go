// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlueprintInitParameters struct {
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/therandombyte/provider-vra8/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Flag to indicate blueprint can be requested from any project in org
	RequestScopeOrg *bool `json:"requestScopeOrg,omitempty" tf:"request_scope_org,omitempty"`
}

type BlueprintObservation struct {
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	ContentSourceID *string `json:"contentSourceId,omitempty" tf:"content_source_id,omitempty"`

	ContentSourcePath *string `json:"contentSourcePath,omitempty" tf:"content_source_path,omitempty"`

	ContentSourceSyncAt *string `json:"contentSourceSyncAt,omitempty" tf:"content_source_sync_at,omitempty"`

	// +listType=set
	ContentSourceSyncMessages []*string `json:"contentSourceSyncMessages,omitempty" tf:"content_source_sync_messages,omitempty"`

	ContentSourceSyncStatus *string `json:"contentSourceSyncStatus,omitempty" tf:"content_source_sync_status,omitempty"`

	ContentSourceType *string `json:"contentSourceType,omitempty" tf:"content_source_type,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// Flag to indicate blueprint can be requested from any project in org
	RequestScopeOrg *bool `json:"requestScopeOrg,omitempty" tf:"request_scope_org,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TotalReleasedVersions *float64 `json:"totalReleasedVersions,omitempty" tf:"total_released_versions,omitempty"`

	TotalVersions *float64 `json:"totalVersions,omitempty" tf:"total_versions,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`

	Valid *bool `json:"valid,omitempty" tf:"valid,omitempty"`

	ValidationMessages []ValidationMessagesObservation `json:"validationMessages,omitempty" tf:"validation_messages,omitempty"`
}

type BlueprintParameters struct {

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/therandombyte/provider-vra8/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Flag to indicate blueprint can be requested from any project in org
	// +kubebuilder:validation:Optional
	RequestScopeOrg *bool `json:"requestScopeOrg,omitempty" tf:"request_scope_org,omitempty"`
}

type ValidationMessagesInitParameters struct {
}

type ValidationMessagesObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidationMessagesParameters struct {
}

// BlueprintSpec defines the desired state of Blueprint
type BlueprintSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlueprintParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BlueprintInitParameters `json:"initProvider,omitempty"`
}

// BlueprintStatus defines the observed state of Blueprint.
type BlueprintStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlueprintObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Blueprint is the Schema for the Blueprints API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra8}
type Blueprint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   BlueprintSpec   `json:"spec"`
	Status BlueprintStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlueprintList contains a list of Blueprints
type BlueprintList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Blueprint `json:"items"`
}

// Repository type metadata.
var (
	Blueprint_Kind             = "Blueprint"
	Blueprint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Blueprint_Kind}.String()
	Blueprint_KindAPIVersion   = Blueprint_Kind + "." + CRDGroupVersion.String()
	Blueprint_GroupVersionKind = CRDGroupVersion.WithKind(Blueprint_Kind)
)

func init() {
	SchemeBuilder.Register(&Blueprint{}, &BlueprintList{})
}
